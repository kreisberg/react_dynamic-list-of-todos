{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","helpers.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoList","memo","todos","selectedTodoById","handleSelectTodo","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","searchQuery","value","handleOnChange","handleOnDelete","handleOnFilter","onChange","event","target","placeholder","style","pointerEvents","Loader","TodoModal","handleOnClose","useState","user","setUser","useEffect","userId","href","email","name","App","setTodos","selectedTodoId","setSelectedTodoId","setSearchQuery","filter","setFilter","visibleTodos","useMemo","isQueryInclude","toLowerCase","includes","trim","isFilter","getFilteredTodos","selectedTodo","find","selectValue","useCallback","clearSearchQuery","changeInSearchQuery","closeSelectedTodo","length","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.606ce8da.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { memo } from 'react';\nimport classNames from 'classnames';\nimport { ListProps } from '../../types/ListProps';\n\nexport const TodoList: React.FC<ListProps> = memo(({\n  todos,\n  selectedTodoById,\n  handleSelectTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map((todo) => (\n        <tr\n          key={todo.id}\n          data-cy=\"todo\"\n          className=\"\"\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames({\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => handleSelectTodo(todo.id)}\n            >\n              <span className=\"icon\">\n                <i\n                  className={classNames({\n                    'far fa-eye-slash': selectedTodoById === todo.id,\n                    'far fa-eye': selectedTodoById !== todo.id,\n                  })}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n));\n","import { memo } from 'react';\nimport { FilterProps } from '../../types/FilterProps';\n\nexport const TodoFilter: React.FC<FilterProps> = memo(({\n  searchQuery,\n  value,\n  handleOnChange,\n  handleOnDelete,\n  handleOnFilter,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={value}\n          onChange={event => handleOnFilter(event.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={searchQuery}\n        onChange={event => handleOnChange(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {searchQuery && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={handleOnDelete}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n));\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState, memo } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { Properties } from '../../types/ModalProps';\n\nexport const TodoModal: React.FC<Properties> = memo(({\n  todo,\n  handleOnClose,\n}) => {\n  const [user, setUser] = useState<User | 0>(0);\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(setUser);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleOnClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              {todo.completed\n                ? <strong className=\"has-text-danger\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, {\n  useState, useEffect, useMemo, useCallback,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getFilteredTodos } from './helpers';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filter, setFilter] = useState('all');\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos);\n  }, []);\n\n  // const visibleTodos = todos.filter(todo => {\n  //   const isQueryInclude = todo.title.toLowerCase().includes(searchQuery.toLowerCase().trim());\n  //   let isFilter = true;\n\n  //   switch (filter) {\n  //     case 'active':\n  //       isFilter = !todo.completed;\n  //       break;\n\n  //     case 'completed':\n  //       isFilter = todo.completed;\n  //       break;\n\n  //     default:\n  //       isFilter = true;\n  //   }\n\n  //   return isQueryInclude && isFilter;\n  // });\n\n  const visibleTodos = useMemo(() => (\n    getFilteredTodos(todos, filter, searchQuery)\n  ), [todos, filter, searchQuery]);\n\n  const selectTodoId = (todoId: number) => {\n    setSelectedTodoId(todoId);\n  };\n  // const selectTodoId = useCallback(() => (\n  //   todoId: number,\n  // ) => setSelectedTodoId(todoId), []);\n\n  const selectedTodo = visibleTodos.find(todo => (\n    todo.id === selectedTodoId\n  ));\n\n  // const selectedTodo = useMemo(() => (\n  //   visibleTodos.find(todo => (\n  //     todo.id === selectTodoId\n  //   ))\n  // ), [selectedTodoId, visibleTodos]);\n\n  const selectValue = useCallback((value: string) => {\n    setFilter(value);\n  }, []);\n\n  const clearSearchQuery = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  const changeInSearchQuery = useCallback((value: string) => {\n    setSearchQuery(value);\n  }, []);\n\n  const closeSelectedTodo = useCallback(() => {\n    setSelectedTodoId(0);\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                searchQuery={searchQuery}\n                value={filter}\n                handleOnChange={changeInSearchQuery}\n                handleOnDelete={clearSearchQuery}\n                handleOnFilter={selectValue}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length > 0\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodoById={selectedTodoId}\n                    handleSelectTodo={selectTodoId}\n                  />\n                )\n                : (\n                  <Loader />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          handleOnClose={closeSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from './types/Todo';\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  filter: string,\n  searchQuery: string,\n) => {\n  return todos.filter(todo => {\n    const isQueryInclude = todo.title\n      .toLowerCase()\n      .includes(searchQuery.toLowerCase().trim());\n\n    let isFilter = true;\n\n    switch (filter) {\n      case 'active':\n        isFilter = !todo.completed;\n        break;\n\n      case 'completed':\n        isFilter = todo.completed;\n        break;\n\n      default:\n        isFilter = true;\n        break;\n    }\n\n    return isQueryInclude && isFilter;\n  });\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}